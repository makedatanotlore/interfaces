We are going to look into some of the existing interfaces in
Java. We'll start off with looking into how Java can help you sort
objects. First we're looking at how Java sorts String objects and
continue with sorting Member objects to learn about the beauty of
interfaces and how relativelyeasy it is to write general methods and
classes.

1. Let's start out with sorting String objects. Crete a class, Sorter,
in the package net.sortex.strings. Write a main method that sorts the
Strings passed as arguments to the program (the main method of the
class). The sorting should be done using Arrays.sort(). Print the
String objects after you've sorted them.

''Hint: Arrays has a method called toString which you can pass an
array of Object references (e g array of String refereces).''

2. How could Java possibly know how to sort the array?

''Hint: When you're sorting things in the real world you usually, or
at least sometimes, compare two objects to see which one is biggest or
they're of the same size. Java does the same thing. In the case of
String objects, the Comparable interface is used.''

3. Create a simple class, Book:

* with the following instance variables:
** private String name
* a public constructor with which you can set the name of the book
* a public method that returns name
* which is in the package net.sortex.books

4 Add a test class TestBook in the package net.sortex.books.test. Add
a main method to the class and create 4 Book instances and stores them
in an ArrayList (ArrayList<Book>). Sort the Book instances using the
method sort in Collections.

Compile.

Uh oh... didn't quite work. Why? Read the error message the compiler
printed.

5. Add a method <code>int compareTo(String anotherString)</code> to
the Book class.

Compile.

Still can't sort.

6. State that your class is implementing the Comparable interface.

Hard to see if it worked, isn't it?

7. Write a method in the Book class that:

* can return a String representation of a Book object
* is automatically called by for example System.out.println

Ok, it works kind of good now. Are we happy now? No, let's add some
more stuff to Book.

8. Add, to Book, the instance variable 

* String author
* int year

This means you need to rewrite your constructor with two additional
parameters. You also "may" need to update the toString method.

9. Imagine we want to sort Books according to this order:

* name
* year

Add code to the compareTo method to reflect this.



But imagine now that we would like to sort Books in order of year of
publication and sometimes in order of name. This is not by any means a
strange of uncommon requirement. In this case we need to use a better
interface, Comparator. More on this in the coming exercises.
